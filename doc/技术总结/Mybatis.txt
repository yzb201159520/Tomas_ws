MyBatis小作文：
	MyBatis是一个小巧但功能强大的ORM框架，它使用接口和对应Mapper的xml文件以jdk模式的动态代理生成对应的代理类。
	在mybatis的mapper中namespace值需与指向的接口一致，在其中编写的select等标签的id属性需与接口方法名一致，在传入参数和结果集处理上，可以使用resultMap和parameterMap自定义处理参数对应，也可以使用parameterType和resultType指定相同名字的字段对应，底层使用typeHanlder处理默认的java与jdbc的数据类型对应，也可使用自定义的typehandler处理对应的java类型。
	在与Spring的结合使用上，使用SqlSessionFactoryBean管理mapper文件，mybatis配置文件,dataSource(数据源)，typeHandler(类型处理),typeAlias(类型简写)，缓存等的配置。使用MapperScannerConfigurer类管理需要动态生成代理类的接口，ScannerConfigurer在启动时会检查匹配的Mapper和接口，并交接MapperFactoryBean生成一个MapperProxy的代理类放入Spring的容器中，在代理类的某方法被初次调用时，会在代理类中生成对应MapperMethod,在底层通过sqlSession完成执行,并由SqlSession内部管理一级缓存和二级缓存。

1.MyBatis的缓存机制(开关)
	缓存机制:MyBatis分为一级缓存和二级缓存，两级缓存均在SqlSession中进行生成和管理，
	其中一级缓存为MyBatis在与数据库的每次回话生成SqlSession时在其内部生成，由Executor进行管理，主要为了优化短时间内进行相同查询时带来的数据库查询耗时，它存在时间短，随着update等操作失效，也随sqlSession关闭而清除。(为PerpetualCache)
	二级缓存为MyBastis的应用级别的缓存，MyBatis中的每个Mapper均可以配置一个cache，或者通过cache-ref可几个mapper共用一个cache,由CachingExcutor进行管理，使用二级缓存后，请求会从sqlSession先经过CachingExcutor与二级缓存，然后再经过Executor和一级缓存，然后才会去查询数据库，而后放到一级缓存和二级缓存中。可以使用Mybatis自带的缓存类，可以自定义，也可以使用第三方的缓存工具。

开关方法:一级缓存在官方目前并未提出打开和关闭的方法，默认是使用一级缓存的。
二级缓存只有在三种条件同时满足的情况下才会生效:
	a.在mybatis-config中配置的cacheEnabled=true(默认为true)
	b.在需要使用的mapper中配置<cache/>或者cache-ref，(只写一个cache表示使用自带缓存，使用其他缓存可以用<property配置属性)
	c.在select方法上的useCache属性为true,(默认为true)
全局关闭在mybatis配置中使用cacheEnabled属性，默认为true，可修改为false.局部关闭在mapper方法上修改useCache为false即可。

可参考《CSDN 深入理解mybatis原理》系列文章