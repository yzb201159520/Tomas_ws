<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:aop="http://www.springframework.org/schema/tx" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation=
               "http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-4.0.xsd 
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">
<!-- configuration details go here -->
	<!-- 先注掉吧Thymeleaf这个东西比较大，还玩不转
	<bean id="templateResolver" class="org.thymeleaf.templateresolver.ServletContextTemplateResolver"
		p:prefix="/WEB-INF/templates/"
		p:suffix=".html"
		p:templateMode="HTML5" />
	<bean id="templateEngine" class="org.thymeleaf.spring3.SpringTemplateEngine"
		p:templateResolver-ref="templateResolver" />
	<bean id="viewResolver" class="org.thymeleaf.spring3.view.ThymeleafViewResolver"
		p:templateEngine-ref="templateEngine" /> -->
	<!-- 获取applicationContext的方法，声明在Spring的Context中，可获取springMvc的和Spring中的bean -->

    <!-- 启用aspectj的自动代理，可在java中配置 -->
    <!--<aop:aspectj-autoproxy/>-->

    <!-- 声明式事务 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <bean name="applicationContextHolder" class="com.tomas.web.utils.ApplicationContextHolder"/>

	<context:property-placeholder location="classpath:config/jdbc/jdbc.properties"/>
	
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${jdbc.driverClassName}"/>
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
	</bean>
	
	<!-- 整合MyBatis -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="mapperLocations" value="classpath:com/tomas/web/dao/mapper/*.xml"/>
		<property name="dataSource" ref="dataSource"/>
		<property name="typeAliasesPackage" value="com.tomas.web.instance"/>
		<property name="typeHandlersPackage" value="com.tomas.web.dao.typehandlers"/>
		<property name="configLocation" value="classpath:config/jdbc/mybatis-config.xml" />
	</bean>
	
	<!-- 配置MyBatis的接口映射 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 注意这里如果指定basePackage可以让scanner在指定目录下进行扫描，并将扫描到的接口动态的组装为SpringBean -->
		<!-- 将扫描到的接口通过MapperFactoryBean转化为对应接口实现的SpringBean -->
		<property name="basePackage" value="com.tomas.web.dao.itrface"/>
		<!-- 这其中有几个属性sqlSessionFactoryBeanName(name)与sqlSessionFactory(实体) 与上面的配置保持一致-->
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
	</bean>
</beans>